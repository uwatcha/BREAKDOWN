void play() {
  println("life",racket.life);
  println("hp",racket.hp);
  timer++;
//ボールの処理-------------------------------------------------------------------------------------------------------------------------------------------
  if (ballRemoveAllow) {
    ballRemove(); //<>//
    ballRemoveAllow = false;
  }

  hiscore = loadHiscore();
  ballMove();
  ballShow(bx, by, bw, bh);
//-------------------------------------------------------------------------------------------------------------------------------------------------------  


//ラケットの処理-----------------------------------------------------------------------------------------------------------------------------------------
  racket.move(mouseX - racket.w/2, height-50);//マウスをラケットの中央に表示するためにracket.w/2を引いている。 
  racket.reflect(bx, by, bw, bh, bdx, bdy);
//-------------------------------------------------------------------------------------------------------------------------------------------------------


//自分のショットの処理-----------------------------------------------------------------------------------------------------------------------------------
  for (int i=myShotList.size () -1; i >= 0; i--) {//１番先に発射されたショットから処理
    MyShot mshot = myShotList.get(i);
    if (mshot.y+mshot.h >= 0) {//ショットが画面内にあるならMyShotの関数を使用する。
      mshot.myMove();
      mshot.show();
    }
    if (mshot.y <= 0 || enemy.shotHitCheck(mshot)) {//画面内に無い、または敵にヒットした場合はそのショットのパラメータが入ったリストの要素を取り除く。
      myShotList.remove(mshot);
    }
  }
//-------------------------------------------------------------------------------------------------------------------------------------------------------


//敵のショットの処理-------------------------------------------------------------------------------------------------------------------------------------
  if (!whenDestroyed) {
    if (enemyList.size() != 0) {
      enemy = enemyList.get(int(random(0, enemyList.size())));
      if (sx == 0 && sy == 0) {
        sx = enemy.x+enemy.w/2;
        sy = enemy.y;
      }
      noStroke();
      fill(0, 255, 255);
      rect(sx, sy, 3, 30);
      stroke(0);
      fill(255);
      if (stage%2 != 0 && ballAccelerateAllow) {
        sdy += 5;
        ballAccelerateAllow = false;
      }
      sy += sdy;
      for (int i = enemyList.size()-1; i >= 0; i--) {
        int hit = baseHitCheck(racket.x, racket.y, racket.w, racket.h, 0, 0, sx, sy, 3, 30, 0, 7);
        if (hit > 0) {
          sx = 0;
          sy = 0;
          racket.hp--;
        }
      }
      if (sy >= height) {
        sx = 0;
        sy = 0;
      }
    }
  }
//------------------------------------------------------------------------------------------------------------------------------------------------------


//敵の処理----------------------------------------------------------------------------------------------------------------------------------------------
  for (int i=enemyList.size () -1; i >= 0; i--) {//右から左に、下から上に敵ブロックの処理を行う。
    enemy = enemyList.get(i); 
    enemy.show(); 
    enemy.ballHitCheck(); 
    for (int j=myShotList.size() -1; j >= 0; j--) {
      if (enemy.shotHitCheck(myShotList.get(j))) {
        break;
      }
    }
  }
  
  enemy.approached();
//-------------------------------------------------------------------------------------------------------------------------------------------------------


//---画面端との反射、判定--------------------------------------------------------------------------------------------------------------------------------
  //ボールが完全に画面下から画面買いに出てしまったら、ボールを再スタートする。
  if (by-bh/2 - bh/2 >= height) {
    ballRemove();
  }
  //ボールが左右の壁に触れたら、反射する。
  if (bx - bw/2 < 0 || bx + bw/2 >=width/1.4) {
    bdx = -bdx;
  }
  //ボールが上の壁に触れたら、反射する。  
  if (by - bh/2 < 0) {
    bdy = -bdy;
  }
//-------------------------------------------------------------------------------------------------------------------------------------------------------


//ボールを落とした時に文字を表示-------------------------------------------------------------------------------------------------------------------------
  if (bw == 0 && !whenDestroyed) {
    textSize(50);
    text("Click to Throw", width/2.8-180, 750);
  }
//-------------------------------------------------------------------------------------------------------------------------------------------------------


//ダメージによるラケットの見た目変化---------------------------------------------------------------------------------------------------------------------
  if (racket.hp == 2) {
    fill(90, 255, 25);
    racket.show();
  } else if (racket.hp == 1) {
    fill(0, 0, 255);
    racket.show();
  } else if (racket.hp == 0) {
    destroy(mouseX - racket.w/2, height-50);
  }
//-------------------------------------------------------------------------------------------------------------------------------------------------------


//敵を全滅させたとき-------------------------------------------------------------------------------------------------------------------------------------
  if (enemyList.size() ==0) {
    scene = 2;
    score += 500;
  }
//-------------------------------------------------------------------------------------------------------------------------------------------------------


//画面の右側の処理---------------------------------------------------------------------------------------------------------------------------------------
  menu();
//-------------------------------------------------------------------------------------------------------------------------------------------------------
}
